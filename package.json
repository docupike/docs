{
    "name": "i-doit-docs",
    "description": "Documentation of things with i-doit.cloud",
    "keywords": [
        "i-doit",
        "idoit",
        "CMDB",
        "IT documentation",
        "it assets",
        "it asset management",
        "ITAM",
        "documentation",
        "docs",
        "documentation of things",
        "configuration items",
        "i-doit.cloud"
    ],
    "version": "0.0.0-dev",
    "homepage": "https://docs.i-doit.cloud/",
    "repository": {
        "type": "git",
        "url": "https://github.com/i-doit/docs"
    },
    "bugs": {
        "url": "https://github.com/i-doit/docs/issues"
    },
    "license": "CC-BY-SA-4.0",
    "author": "synetics GmbH <info@i-doit.com> (https://i-doit.com/)",
    "devDependencies": {
        "alex": "^10",
        "cloc": "^2.8.0",
        "husky": "^8",
        "jscpd": "^3.3.25",
        "jsonlint": "^1.6.3",
        "markdown-spellcheck": "git+https://github.com/lukeapage/node-markdown-spellcheck.git",
        "npm-run-all": "^4.1",
        "npm-scripts-info": "^0.3.9",
        "rapidoc": "^9",
        "remark-cli": "^11.0",
        "remark-frontmatter": "^4",
        "remark-gfm": "^3",
        "remark-lint": "^9.0",
        "remark-lint-match-punctuation": "^0.2.0",
        "remark-lint-no-dead-urls": "^1.1.0",
        "remark-lint-no-empty-sections": "^4.0.0",
        "remark-lint-no-long-code": "^0.1.2",
        "remark-lint-no-repeat-punctuation": "^0.1.3",
        "remark-lint-no-trailing-spaces": "^2.0.1",
        "remark-lint-write-good": "^1.2.0",
        "remark-normalize-headings": "^3",
        "remark-preset-lint-consistent": "^5.0",
        "remark-preset-lint-recommended": "^6.0"
    },
    "scripts": {
        "?docs:build": "Generate documentation as static Web site",
        "docs:build": "mkdocs build",
        "?docs:serve": "Serve documentation locally",
        "docs:serve": "mkdocs serve",
        "?info": "Display information about scripts",
        "info": "npm-scripts-info",
        "?install": "Install dependencies",
        "install": "run-s install:*",
        "?install:api-reference": "Copy code for API reference",
        "install:api-reference": "cp ./node_modules/rapidoc/dist/rapidoc-min.js ./docs/dev/api/v2/",
        "?pre-commit": "Run pre-commit hooks",
        "pre-commit": "run-s pre-commit:*",
        "?pre-commit:no-main-branches": "Prevent direct commits to main branches",
        "pre-commit:no-main-branches": "echo main | grep -v -w -q $(git rev-parse --abbrev-ref HEAD)",
        "?pre-commit:test": "Run tests locally",
        "pre-commit:test": "npm test",
        "?pre-push": "Run pre-push hooks",
        "pre-push": "run-s pre-push:*",
        "?pre-push:system": "Run advanced tests",
        "pre-push:system": "npm run system",
        "?pre-push:test": "Run tests locally",
        "pre-push:test": "npm test",
        "?prepare": "Prepare dependencies",
        "prepare": "run-s prepare:*",
        "?prepare:husky": "Install husky",
        "prepare:husky": "husky install",
        "?sort-word-list": "Sort words in custom dictionary",
        "sort-word-list": "sort .spelling | uniq > /tmp/.spelling && mv /tmp/.spelling .spelling",
        "?stats:cloc": "Count lines of code",
        "stats:cloc": "cloc --vcs git",
        "?system": "Run advanced tests",
        "system": "run-s system:*",
        "?system:npm-audit": "Audit NPM packages",
        "system:npm-audit": "npm audit",
        "?system:npm-doctor": "Identify problems with NPM",
        "system:npm-doctor": "npm doctor",
        "?system:npm-outdated": "List out-dated NPM packages",
        "system:npm-outdated": "npm outdated || exit 0",
        "?system:pip-outdated": "List out-dated `pip` packages",
        "system:pip-outdated": "pip list --outdated",
        "?test": "Run tests locally",
        "test": "run-s test:*",
        "?test:markdown": "Lint Markdown files",
        "test:markdown": "remark --ignore-path .gitignore .",
        "?test:spelling": "Check spelling",
        "test:spelling": "git ls-files | grep -e '\\.md$' | xargs mdspell --report --ignore-numbers --ignore-acronyms --en-us",
        "?test:wording": "Catch insensitive, inconsiderate writing",
        "test:wording": "git ls-files | grep -e '\\.md$' | grep -v CODE_OF_CONDUCT changelog | xargs alex",
        "?test:ec": "Verify that files are in harmony with .editorconfig",
        "test:ec": "ec",
        "?test:json": "Lint JSON files",
        "test:json": "git ls-files | grep -e '\\.json$' | xargs -L 1 jsonlint --quiet",
        "?test:yaml": "Lint YAML files",
        "test:yaml": "git ls-files | grep -E '\\.(yml|yaml|.yml.dist)$' | xargs yamllint",
        "?test:cpd": "Run copy/paste detector",
        "test:cpd": "jscpd --config .jscpd.json",
        "?test:docker-compose": "Lint Docker Compose files",
        "test:docker-compose": "git ls-files | grep -e 'docker-compose.*\\.yml$' | xargs -I file docker compose -f file config > /dev/null",
        "?test:dockerfile": "Lint Docker files",
        "test:dockerfile": "git ls-files | grep -e 'Dockerfile$' | xargs hadolint --config .hadolint.yaml",
        "?wtf": "Find open issues",
        "wtf": "git grep --line-number --column --heading -E '(WORKAROUND|TODO|FIXME) '"
    },
    "os": [
        "darwin",
        "linux"
    ],
    "engines": {
        "node": ">=14.16.0",
        "npm": ">=6.7.0"
    }
}
